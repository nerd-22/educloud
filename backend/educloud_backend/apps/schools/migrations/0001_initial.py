# Generated by Django 5.2 on 2025-06-07 12:24

import apps.schools.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('school_type', models.CharField(choices=[('PRIMARY', 'Primary School'), ('SECONDARY', 'Secondary School'), ('HIGH_SCHOOL', 'High School'), ('COLLEGE', 'College')], max_length=20)),
                ('school_code', models.CharField(blank=True, max_length=50, unique=True)),
                ('registration_number', models.CharField(max_length=100, unique=True)),
                ('motto', models.CharField(blank=True, max_length=255)),
                ('year_established', models.IntegerField()),
                ('ownership_type', models.CharField(choices=[('PRIVATE', 'Private'), ('PUBLIC', 'Public'), ('MISSION', 'Mission')], max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('street_address', models.TextField()),
                ('postal_code', models.CharField(max_length=20)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('website', models.URLField(blank=True, validators=[django.core.validators.URLValidator()])),
                ('facebook', models.URLField(blank=True)),
                ('twitter', models.URLField(blank=True)),
                ('instagram', models.URLField(blank=True)),
                ('num_campuses', models.IntegerField(default=1)),
                ('academic_levels', models.JSONField()),
                ('num_students', models.IntegerField()),
                ('num_teachers', models.IntegerField()),
                ('grading_system', models.CharField(max_length=50)),
                ('curriculum_type', models.CharField(max_length=100)),
                ('has_boarding', models.BooleanField(default=False)),
                ('has_online_classes', models.BooleanField(default=False)),
                ('has_library', models.BooleanField(default=False)),
                ('has_laboratories', models.BooleanField(default=False)),
                ('has_computer_lab', models.BooleanField(default=False)),
                ('has_sports_complex', models.BooleanField(default=False)),
                ('has_cafeteria', models.BooleanField(default=False)),
                ('logo', models.ImageField(blank=True, null=True, upload_to=apps.schools.models.school_logo_path)),
                ('accreditation_cert', models.FileField(blank=True, null=True, upload_to='school_docs/')),
                ('registration_docs', models.FileField(blank=True, null=True, upload_to='school_docs/')),
                ('default_language', models.CharField(default='English', max_length=50)),
                ('currency', models.CharField(max_length=10)),
                ('timezone', models.CharField(max_length=50)),
                ('school_year_start', models.DateField()),
                ('school_year_end', models.DateField()),
                ('term_structure', models.CharField(choices=[('2_TERMS', '2 Terms'), ('3_TERMS', '3 Terms'), ('SEMESTER', 'Semester')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('login_url', models.URLField(blank=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=20)),
                ('role', models.CharField(default='School Admin', max_length=100)),
                ('is_school_admin', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='school_admin_set', to='auth.group', verbose_name='groups')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='administrators', to='schools.school')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='school_admin_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
